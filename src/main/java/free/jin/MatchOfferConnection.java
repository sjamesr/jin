/**
 * Jin - a chess client for internet chess servers. More information is available at
 * http://www.jinchess.com/. Copyright (C) 2007 Alexander Maryanovsky. All rights reserved.
 *
 * <p>This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program; if
 * not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 */
package free.jin;

import free.jin.event.MatchOfferListenerManager;
import java.util.Collection;

/**
 * An extension of the <code>Connection</code> interface which adds support for issuing and
 * receiving notifications of match offers.
 */
public interface MatchOfferConnection extends Connection {

  /**
   * Returns the <code>MatchOfferListenerManager</code> via which you can ask to be notified when
   * new match offers are made and withdrawn.
   */
  MatchOfferListenerManager getMatchOfferListenerManager();

  /**
   * Returns the set of pending match offers. Note that the pending match offers are only guaranteed
   * to be retrieved if there are registered <code>MatchOfferListener</code>s.
   */
  Collection getMatchOffers();

  /**
   * Accepts the specified match offer. The match offer must an instance generated by this <code>
   * MatchOfferConnection</code> and must be current.
   */
  void accept(MatchOffer offer);

  /**
   * Declines the specified match offer. The match offer must an instance generated by this <code>
   * MatchOfferConnection</code> and must be current.
   */
  void decline(MatchOffer offer);

  /** Issues the specified match offer. */
  void issue(UserMatchOffer offer);

  /** Withdraws the specified match offer. */
  void withdraw(MatchOffer offer);

  /** Withdraws all match offers. */
  void withdrawAllMatchOffers();

  /** Prevents the specified user from matching us again. */
  void preventMatching(ServerUser user);
}
